
R version 3.2.4 (2016-03-10) -- "Very Secure Dishes"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(SASxport)
> library(Hmisc)
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: 'Hmisc'

The following objects are masked from 'package:base':

    format.pval, round.POSIXt, trunc.POSIXt, units

> Sys.setenv("TZ"="GMT")
> 
> set.seed(42)
> 
> # run the examples, comparing output
> example(SASformat)

SASfrm> ## Examples for vectors
SASfrm> 
SASfrm> fail.time <- c(10,20)

SASfrm> # set attributes
SASfrm> SASformat(fail.time) <- 'Numeric2'

SASfrm> SASiformat(fail.time) <- 'Numeric2'

SASfrm> # display individual attributes
SASfrm> SASformat(fail.time)
[1] "Numeric2"

SASfrm> SASiformat(fail.time)
[1] "Numeric2"

SASfrm> # display all attributes
SASfrm> attributes(fail.time)
$SASformat
[1] "Numeric2"

$SASiformat
[1] "Numeric2"


SASfrm> ## SAStype only applies to data frames
SASfrm> df <- data.frame( fail.time, day=c("Mon","Tue") )

SASfrm> SAStype(df) <- "USER"

SASfrm> SAStype(df)
[1] "USER"

SASfrm> ## Example showing specification of default return value
SASfrm> a <- 70

SASfrm> Hmisc::label(a, default="no label")
[1] "no label"
> example(makeSASNames)

mkSASN>   ## Simple example: no duplicates or more than 8 characters
mkSASN>   makeSASNames( c("height","weight","age","gender"))
[1] "HEIGHT" "WEIGHT" "AGE"    "GENDER"

mkSASN>   ## Resolve duplicates
mkSASN>   makeSASNames( c("a","a","b","b","b","c") )
[1] "A"   "A.1" "B"   "B.1" "B.2" "C"  

mkSASN>   ## Truncate long names
mkSASN>   makeSASNames( c("alphabetic", "numeric", "alphanumeric", "whitespace"))
[1] "ALPHABET" "NUMERIC"  "ALPHANUM" "WHITESPA"

mkSASN>   ## Truncate and make unique
mkSASN>   makeSASNames( rep( c("aaaaaaaaaaa","bbbbbbbbbb"), each=3) )
[1] "AAAAAA"   "AAAAAA.1" "AAAAAA.2" "BBBBBB"   "BBBBBB.1" "BBBBBB.2"

mkSASN>   ## Now do it quietly!
mkSASN>   makeSASNames( rep( c("aaaaaaaaaaa","bbbbbbbbbb"), each=3), quiet=TRUE)
[1] "AAAAAA"   "AAAAAA.1" "AAAAAA.2" "BBBBBB"   "BBBBBB.1" "BBBBBB.2"
Warning messages:
1: In makeSASNames(c("a", "a", "b", "b", "b", "c")) :
  Made 3 duplicate names unique.
2: In makeSASNames(c("alphabetic", "numeric", "alphanumeric", "whitespace")) :
  Truncated 3 long names to 8 characters.
3: In makeSASNames(rep(c("aaaaaaaaaaa", "bbbbbbbbbb"), each = 3)) :
  Truncated 6 long names to 8 characters.
4: In makeSASNames(rep(c("aaaaaaaaaaa", "bbbbbbbbbb"), each = 3)) :
  Made 4 duplicate names unique.
> example(toSAS)

toSAS> ####
toSAS> ## See how an R date/time object will be stored in a SAS xport file:
toSAS> ####
toSAS> 
toSAS> # Date and time
toSAS> dateTimeObj <- ISOdate(2007,08,01,10,14,37)

toSAS> class(dateTimeObj)
[1] "POSIXct" "POSIXt" 

toSAS> dateTimeObj
[1] "2007-08-01 10:14:37 GMT"

toSAS> sasDateTimeObj <- toSAS(dateTimeObj)

toSAS> sasDateTimeObj
[1] 1501582477
attr(,"tzone")
[1] "GMT"
attr(,"SASformat")
[1] "DATETIME16."

toSAS> # Now just the date portion
toSAS> dateObj <- as.Date(dateTimeObj)

toSAS> dateObj
[1] "2007-08-01"

toSAS> sasDateObj <- toSAS(dateObj)

toSAS> sasDateObj
[1] 17379
attr(,"SASformat")
[1] "DATE9."

toSAS> ####
toSAS> ## Create a new R object class based on factor to hold color names
toSAS> ####
toSAS> colorFactor <- function(x) # constructor
toSAS+   {
toSAS+     retval <- factor(x, levels=c("Red","Green","Blue") )
toSAS+     class(retval) <- c("colorFactor","factor")
toSAS+     retval
toSAS+   }

toSAS> ## create one and look at it
toSAS> cf <- colorFactor( c("Red","Red","Blue",NA) )

toSAS> cf
[1] Red  Red  Blue <NA>
Levels: Red Green Blue

toSAS> ## See how it will be represented in a SAS xport file
toSAS> toSAS(cf)
[1] "Red"  "Red"  "Blue" NA    

toSAS> ## Create a new conversion function to store as a RGB hex value
toSAS> toSAS.colorFactor <- function(x, format="")
toSAS+ {
toSAS+    retval <- ifelse(x=="Red", "#FF0000",
toSAS+                     ifelse(x=="Green", "#00FF00", "#0000FF") )
toSAS+    attr(retval, "SASformat") <- format
toSAS+    retval
toSAS+ }

toSAS> ## see it in action
toSAS> toSAS(cf)
[1] "#FF0000" "#FF0000" "#0000FF" NA       
attr(,"SASformat")
[1] ""
> example(write.xport)

wrt.xp> #####
wrt.xp> ## R version of the example given in TS-140
wrt.xp> #####
wrt.xp> 
wrt.xp> ## manually create a data set
wrt.xp> abc <- data.frame( x=c(1, 2, NA, NA ), y=c('a', 'B', NA, '*' ) )

wrt.xp> ## look at it
wrt.xp> abc
   x    y
1  1    a
2  2    B
3 NA <NA>
4 NA    *

wrt.xp> ## add a format specifier (not used by R)
wrt.xp> SASformat(abc$x) <- 'date7.'

wrt.xp> ## add a variable label (not used by R)
wrt.xp> Hmisc::label(abc$y) <- 'character variable'

wrt.xp> ## add a dataset label and type
wrt.xp> Hmisc::label(abc) <- 'Simple example'

wrt.xp> SAStype(abc) <- 'MYTYPE'

wrt.xp> ## verify the additions
wrt.xp> str(abc)
'data.frame':	4 obs. of  2 variables:
 $ x: atomic  1 2 NA NA
  ..- attr(*, "SASformat")= chr "date7."
 $ y: Factor w/ 3 levels "*","B","a": 3 2 NA 1
  ..- attr(*, "label")= chr "character variable"
 - attr(*, "label")= chr "Simple example"
 - attr(*, "SAStype")= chr "MYTYPE"

wrt.xp> # create a SAS XPORT file
wrt.xp> tmp <- tempfile(fileext = ".dat")

wrt.xp> write.xport( abc, file = tmp )

wrt.xp> # list the contents of the file
wrt.xp> ## Not run: 
wrt.xp> ##D lookup.xport(tmp)
wrt.xp> ## End(Not run)
wrt.xp> 
wrt.xp> ## reload the data
wrt.xp> xxx.abc <- read.xport(tmp)

wrt.xp> ## and look at it
wrt.xp> xxx.abc
           X    Y
1 1960-01-02    a
2 1960-01-03    B
3       <NA> <NA>
4       <NA>    *

wrt.xp> ## Check the label and type
wrt.xp> Hmisc::label(xxx.abc)
                   X                    Y 
                  "" "character variable" 

wrt.xp> SAStype(xxx.abc)
[1] "MYTYPE"

wrt.xp> ## Note that the variable names and SAS dataset type have been converted
wrt.xp> ## to uppercase
wrt.xp> 
wrt.xp> 
wrt.xp> 
wrt.xp> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  0.702   0.044   0.735 
